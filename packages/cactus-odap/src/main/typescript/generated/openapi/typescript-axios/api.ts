/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Besu
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssetProfile
 */
export interface AssetProfile {
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    Issuer?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    AssetCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    AssetCodeType?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    IssuanceDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    ExpirationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    VerificationEndPoint?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    DigitalSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    ProspectusLink?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    KeyInformationLink?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    KeyWord?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    TransferRestriction?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    LedgerRequirements?: Array<any>;
}
/**
 * 
 * @export
 * @interface CommitFinalMessage
 */
export interface CommitFinalMessage {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalMessage
     */
    ServerIdentityKey?: string;
    /**
     * 
     * @type {CommitFinalResponseMessage}
     * @memberof CommitFinalMessage
     */
    CommitFinalClaim?: CommitFinalResponseMessage;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalMessage
     */
    CommitFinalClaimFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalMessage
     */
    HashCommitPrepareAck?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalMessage
     */
    ClientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalMessage
     */
    ClientSignature?: string;
}
/**
 * 
 * @export
 * @interface CommitFinalResponseMessage
 */
export interface CommitFinalResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalResponseMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalResponseMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalResponseMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalResponseMessage
     */
    CommitAcknowledgementClaim?: object;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalResponseMessage
     */
    CommitAcknowledgementClaimFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalResponseMessage
     */
    HashCommitFinal?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalResponseMessage
     */
    ServerTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalResponseMessage
     */
    ServerSignature?: string;
}
/**
 * 
 * @export
 * @interface CommitPreparationMessage
 */
export interface CommitPreparationMessage {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationMessage
     */
    HashLockEvidenceAck?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitPreparationMessage
     */
    ClientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationMessage
     */
    ClientSignature?: string;
}
/**
 * 
 * @export
 * @interface CommitPreparationResponse
 */
export interface CommitPreparationResponse {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    HashCommitPrep?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    ServerTransferNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationResponse
     */
    ServerSignature?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CredentialProfile {
    Saml = 'SAML',
    Oauth = 'OAUTH',
    X509 = 'X509'
}

/**
 * 
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    Transactions?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    Actions?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Origin?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Destination?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Balance?: string;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    CurrentStatus?: object;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    ApplicationSpecificParameters?: object;
}
/**
 * 
 * @export
 * @interface InitialMessageAck
 */
export interface InitialMessageAck {
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    sessionID?: string;
    /**
     * 
     * @type {number}
     * @memberof InitialMessageAck
     */
    sequenceNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    odapPhase?: InitialMessageAckOdapPhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    initialRequestMessageHash: string;
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    destination?: string;
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    timeStamp: string;
    /**
     * 
     * @type {string}
     * @memberof InitialMessageAck
     */
    processedTimeStamp: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InitialMessageAckOdapPhaseEnum {
    TransferInitialization = 'TransferInitialization',
    LockEvidenceVerification = 'LockEvidenceVerification',
    CommitmentEstablishment = 'CommitmentEstablishment'
}

/**
 * 
 * @export
 * @interface InitializationRequestMessage
 */
export interface InitializationRequestMessage {
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    developerURN?: string;
    /**
     * 
     * @type {CredentialProfile}
     * @memberof InitializationRequestMessage
     */
    credentialProfile?: CredentialProfile;
    /**
     * 
     * @type {object}
     * @memberof InitializationRequestMessage
     */
    payloadProfile?: object;
    /**
     * 
     * @type {AssetProfile}
     * @memberof InitializationRequestMessage
     */
    applicationProfile?: AssetProfile;
    /**
     * 
     * @type {object}
     * @memberof InitializationRequestMessage
     */
    loggingProfile: object;
    /**
     * 
     * @type {AssetProfile}
     * @memberof InitializationRequestMessage
     */
    accessControlProfile: AssetProfile;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    initializationRequestMessageSignature: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    sourceGatewayPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    sourceGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    recipientGateWayPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    recipientGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    escrowType?: InitializationRequestMessageEscrowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    expiryTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InitializationRequestMessage
     */
    multipleClaimsAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InitializationRequestMessage
     */
    multipleCancelsAllowed?: boolean;
    /**
     * 
     * @type {object}
     * @memberof InitializationRequestMessage
     */
    permissions?: object;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    origin?: string;
    /**
     * 
     * @type {string}
     * @memberof InitializationRequestMessage
     */
    destination?: string;
    /**
     * 
     * @type {object}
     * @memberof InitializationRequestMessage
     */
    subsequentCalls?: object;
    /**
     * 
     * @type {Array<History>}
     * @memberof InitializationRequestMessage
     */
    histories?: Array<History>;
}

/**
    * @export
    * @enum {string}
    */
export enum InitializationRequestMessageEscrowTypeEnum {
    Faucet = 'FAUCET',
    Timelock = 'TIMELOCK',
    Hashlock = 'HASHLOCK',
    Hashtimelock = 'HASHTIMELOCK',
    Multiclaimpc = 'MULTICLAIMPC',
    Destroy = 'DESTROY',
    Burn = 'BURN'
}

/**
 * 
 * @export
 * @interface LockEvidenceMessage
 */
export interface LockEvidenceMessage {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {object}
     * @memberof LockEvidenceMessage
     */
    LockEvidenceClaim?: object;
    /**
     * 
     * @type {object}
     * @memberof LockEvidenceMessage
     */
    LockEvidenceFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    LockEvidenceExpirarion?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    HashCommenceAckRequest?: string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceMessage
     */
    ClientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    ClientSignatureRequest?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceMessage
     */
    MessageHash?: string;
}
/**
 * 
 * @export
 * @interface LockEvidenceResponseMessage
 */
export interface LockEvidenceResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    HashLockEvidenceRequest?: string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceResponseMessage
     */
    ServerTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    ServerSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceResponseMessage
     */
    MessageHash?: string;
}
/**
 * 
 * @export
 * @interface OdapMessage
 */
export interface OdapMessage {
    /**
     * 
     * @type {number}
     * @memberof OdapMessage
     */
    SequenceNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    Phase?: OdapMessagePhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    ResourceURL?: string;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    DeveloperURN?: string;
    /**
     * 
     * @type {OdapMessageActionResponse}
     * @memberof OdapMessage
     */
    ActionResponse?: OdapMessageActionResponse;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    CredentialProfile?: OdapMessageCredentialProfileEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof OdapMessage
     */
    CredentialBlock?: Array<any>;
    /**
     * 
     * @type {object}
     * @memberof OdapMessage
     */
    CredentialsProfile?: object;
    /**
     * 
     * @type {object}
     * @memberof OdapMessage
     */
    ApplicationProfile?: object;
    /**
     * 
     * @type {object}
     * @memberof OdapMessage
     */
    Payload?: object;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    PayloadHash?: string;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    MessageSignature?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum OdapMessagePhaseEnum {
    TransferInitialization = 'TransferInitialization',
    LockEvidenceVerification = 'LockEvidenceVerification',
    CommitmentEstablishment = 'CommitmentEstablishment'
}
/**
    * @export
    * @enum {string}
    */
export enum OdapMessageCredentialProfileEnum {
    Saml = 'SAML',
    OAuth = 'OAuth',
    X509 = 'X509'
}

/**
 * 
 * @export
 * @interface OdapMessageActionResponse
 */
export interface OdapMessageActionResponse {
    /**
     * 
     * @type {string}
     * @memberof OdapMessageActionResponse
     */
    ResponseCode?: OdapMessageActionResponseResponseCodeEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof OdapMessageActionResponse
     */
    Arguments?: Array<any>;
}

/**
    * @export
    * @enum {string}
    */
export enum OdapMessageActionResponseResponseCodeEnum {
    OK = '200',
    RESOURCE_NOT_FOUND = '404'
}

/**
 * 
 * @export
 * @interface TransferCommenceMessage
 */
export interface TransferCommenceMessage {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    originatorPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    beneficiaryPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    senderDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    recipientDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    hashAssetProfile: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceMessage
     */
    assetUnit?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    hashPrevMessage: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceMessage
     */
    clientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceMessage
     */
    clientSignature: string;
}
/**
 * 
 * @export
 * @interface TransferCommenceResponseMessage
 */
export interface TransferCommenceResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    ClientIdentityPubKey?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    HashCommenceRequest?: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceResponseMessage
     */
    ServerTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    ServerSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceResponseMessage
     */
    MessageHash?: string;
}
/**
 * 
 * @export
 * @interface TransferCompletMessageResponse
 */
export interface TransferCompletMessageResponse {
    /**
     * 
     * @type {string}
     * @memberof TransferCompletMessageResponse
     */
    OK?: string;
}
/**
 * 
 * @export
 * @interface TransferCompleteMessage
 */
export interface TransferCompleteMessage {
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteMessage
     */
    MessageType?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteMessage
     */
    ClientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteMessage
     */
    ServerIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteMessage
     */
    HashCommitFinalAck?: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCompleteMessage
     */
    ClientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteMessage
     */
    ClientSignature?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InitializationRequestMessage} [initializationRequestMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase1TransferInitiation: async (initializationRequestMessage?: InitializationRequestMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase1/transferinitiation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initializationRequestMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LockEvidenceMessage} [lockEvidenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase2LockEvidence: async (lockEvidenceMessage?: LockEvidenceMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase2/lockevidence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lockEvidenceMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransferCommenceMessage} [transferCommenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase2TransferCommence: async (transferCommenceMessage?: TransferCommenceMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase2/transfercommence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCommenceMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommitFinalMessage} [commitFinalMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3CommitFinal: async (commitFinalMessage?: CommitFinalMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase3/commitfinal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commitFinalMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommitPreparationMessage} [commitPreparationMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3CommitPreparation: async (commitPreparationMessage?: CommitPreparationMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase3/commitpreparation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commitPreparationMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransferCompleteMessage} [transferCompleteMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3TransferComplete: async (transferCompleteMessage?: TransferCompleteMessage, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/phase3/transfercomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCompleteMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InitializationRequestMessage} [initializationRequestMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase1TransferInitiation(initializationRequestMessage?: InitializationRequestMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialMessageAck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase1TransferInitiation(initializationRequestMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LockEvidenceMessage} [lockEvidenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase2LockEvidence(lockEvidenceMessage?: LockEvidenceMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LockEvidenceResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase2LockEvidence(lockEvidenceMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TransferCommenceMessage} [transferCommenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase2TransferCommence(transferCommenceMessage?: TransferCommenceMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCommenceResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase2TransferCommence(transferCommenceMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CommitFinalMessage} [commitFinalMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase3CommitFinal(commitFinalMessage?: CommitFinalMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitFinalResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase3CommitFinal(commitFinalMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CommitPreparationMessage} [commitPreparationMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase3CommitPreparation(commitPreparationMessage?: CommitPreparationMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitPreparationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase3CommitPreparation(commitPreparationMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TransferCompleteMessage} [transferCompleteMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Phase3TransferComplete(transferCompleteMessage?: TransferCompleteMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Phase3TransferComplete(transferCompleteMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {InitializationRequestMessage} [initializationRequestMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase1TransferInitiation(initializationRequestMessage?: InitializationRequestMessage, options?: any): AxiosPromise<InitialMessageAck> {
            return localVarFp.apiV2Phase1TransferInitiation(initializationRequestMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LockEvidenceMessage} [lockEvidenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase2LockEvidence(lockEvidenceMessage?: LockEvidenceMessage, options?: any): AxiosPromise<LockEvidenceResponseMessage> {
            return localVarFp.apiV2Phase2LockEvidence(lockEvidenceMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransferCommenceMessage} [transferCommenceMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase2TransferCommence(transferCommenceMessage?: TransferCommenceMessage, options?: any): AxiosPromise<TransferCommenceResponseMessage> {
            return localVarFp.apiV2Phase2TransferCommence(transferCommenceMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CommitFinalMessage} [commitFinalMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3CommitFinal(commitFinalMessage?: CommitFinalMessage, options?: any): AxiosPromise<CommitFinalResponseMessage> {
            return localVarFp.apiV2Phase3CommitFinal(commitFinalMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CommitPreparationMessage} [commitPreparationMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3CommitPreparation(commitPreparationMessage?: CommitPreparationMessage, options?: any): AxiosPromise<CommitPreparationResponse> {
            return localVarFp.apiV2Phase3CommitPreparation(commitPreparationMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransferCompleteMessage} [transferCompleteMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Phase3TransferComplete(transferCompleteMessage?: TransferCompleteMessage, options?: any): AxiosPromise<any> {
            return localVarFp.apiV2Phase3TransferComplete(transferCompleteMessage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {InitializationRequestMessage} [initializationRequestMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase1TransferInitiation(initializationRequestMessage?: InitializationRequestMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase1TransferInitiation(initializationRequestMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LockEvidenceMessage} [lockEvidenceMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase2LockEvidence(lockEvidenceMessage?: LockEvidenceMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase2LockEvidence(lockEvidenceMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransferCommenceMessage} [transferCommenceMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase2TransferCommence(transferCommenceMessage?: TransferCommenceMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase2TransferCommence(transferCommenceMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CommitFinalMessage} [commitFinalMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase3CommitFinal(commitFinalMessage?: CommitFinalMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase3CommitFinal(commitFinalMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CommitPreparationMessage} [commitPreparationMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase3CommitPreparation(commitPreparationMessage?: CommitPreparationMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase3CommitPreparation(commitPreparationMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransferCompleteMessage} [transferCompleteMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Phase3TransferComplete(transferCompleteMessage?: TransferCompleteMessage, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Phase3TransferComplete(transferCompleteMessage, options).then((request) => request(this.axios, this.basePath));
    }
}


